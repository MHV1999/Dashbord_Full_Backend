// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  roles         UserRole[]
  refreshTokens RefreshToken[]
  organizations Organization[]
  projects      Project[]
  issues        Issue[]
  comments      Comment[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles       RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model RefreshToken {
  id         String   @id @default(cuid())
  jti        String   @unique
  tokenHash  String
  userId     String
  deviceInfo String?
  revoked    Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner     User      @relation(fields: [ownerId], references: [id])
  projects  Project[]

  @@map("organizations")
}

model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  ownerId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  owner         User        @relation(fields: [ownerId], references: [id])
  boards        Board[]

  @@map("projects")
}

model Board {
  id        String   @id @default(cuid())
  name      String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
  lists   List[]

  @@map("boards")
}

model List {
  id        String   @id @default(cuid())
  name      String
  boardId   String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board Board  @relation(fields: [boardId], references: [id])
  issues Issue[]

  @@map("lists")
}

model Issue {
  id          String    @id @default(cuid())
  title       String
  description String?
  listId      String
  position    Int
  assigneeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  list       List       @relation(fields: [listId], references: [id])
  assignee   User?      @relation(fields: [assigneeId], references: [id])
  comments   Comment[]
  attachments Attachment[]

  @@map("issues")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  issueId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  issue Issue @relation(fields: [issueId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String   @id @default(cuid())
  url        String
  issueId    String
  uploaderId String?
  filename   String?
  mimeType   String?
  size       Int?
  createdAt  DateTime @default(now())

  issue Issue @relation(fields: [issueId], references: [id])

  @@map("attachments")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  userId    String?
  details   Json?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}